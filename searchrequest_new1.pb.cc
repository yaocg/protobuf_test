// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: searchrequest_new1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "searchrequest_new1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TestDemoNew1 {

namespace {

const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchRequest_Corpus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_searchrequest_5fnew1_2eproto() {
  protobuf_AddDesc_searchrequest_5fnew1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "searchrequest_new1.proto");
  GOOGLE_CHECK(file != NULL);
  SearchRequest_descriptor_ = file->message_type(0);
  static const int SearchRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, result_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, money_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, money_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, corpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, new1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, new2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, new3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, new4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, new5_),
  };
  SearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchRequest));
  SearchRequest_Corpus_descriptor_ = SearchRequest_descriptor_->enum_type(0);
  Result_descriptor_ = file->message_type(1);
  static const int Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, snippets_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_searchrequest_5fnew1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_searchrequest_5fnew1_2eproto() {
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchRequest::_default_new1_;
  delete SearchRequest::_default_new2_;
  delete SearchRequest::_default_new3_;
  delete SearchRequest::_default_new4_;
  delete SearchRequest::_default_new5_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_searchrequest_5fnew1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030searchrequest_new1.proto\022\014TestDemoNew1"
    "\"\336\003\n\rSearchRequest\022\r\n\005query\030\001 \002(\t\022\027\n\013pag"
    "e_number\030\002 \001(\005:\00210\022\027\n\017result_per_page\030\003 "
    "\001(\005\022\017\n\007money_1\030\004 \001(\002\022\017\n\007money_2\030\005 \001(\001\022\023\n"
    "\007samples\030\006 \003(\005B\002\020\001\022=\n\006corpus\030\007 \001(\0162\".Tes"
    "tDemoNew1.SearchRequest.Corpus:\tUNIVERSA"
    "L\022$\n\006result\030\010 \001(\0132\024.TestDemoNew1.Result\022"
    "\034\n\004new1\030\t \001(\t:\016add new1 field\022\034\n\004new2\030\n "
    "\001(\t:\016add new2 field\022\034\n\004new3\030\013 \001(\t:\016add n"
    "ew3 field\022\034\n\004new4\030\014 \001(\t:\016add new4 field\022"
    "\034\n\004new5\030\r \001(\t:\016add new5 field\"Z\n\006Corpus\022"
    "\r\n\tUNIVERSAL\020\000\022\007\n\003WEB\020\001\022\n\n\006IMAGES\020\002\022\t\n\005L"
    "OCAL\020\003\022\010\n\004NEWS\020\004\022\014\n\010PRODUCTS\020\005\022\t\n\005VIDEO\020"
    "\006\"6\n\006Result\022\013\n\003url\030\001 \002(\t\022\r\n\005title\030\002 \001(\t\022"
    "\020\n\010snippets\030\003 \003(\t", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "searchrequest_new1.proto", &protobuf_RegisterTypes);
  SearchRequest::_default_new1_ =
      new ::std::string("add new1 field", 14);
  SearchRequest::_default_new2_ =
      new ::std::string("add new2 field", 14);
  SearchRequest::_default_new3_ =
      new ::std::string("add new3 field", 14);
  SearchRequest::_default_new4_ =
      new ::std::string("add new4 field", 14);
  SearchRequest::_default_new5_ =
      new ::std::string("add new5 field", 14);
  SearchRequest::default_instance_ = new SearchRequest();
  Result::default_instance_ = new Result();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_searchrequest_5fnew1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_searchrequest_5fnew1_2eproto {
  StaticDescriptorInitializer_searchrequest_5fnew1_2eproto() {
    protobuf_AddDesc_searchrequest_5fnew1_2eproto();
  }
} static_descriptor_initializer_searchrequest_5fnew1_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchRequest_Corpus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_Corpus_descriptor_;
}
bool SearchRequest_Corpus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchRequest_Corpus SearchRequest::UNIVERSAL;
const SearchRequest_Corpus SearchRequest::WEB;
const SearchRequest_Corpus SearchRequest::IMAGES;
const SearchRequest_Corpus SearchRequest::LOCAL;
const SearchRequest_Corpus SearchRequest::NEWS;
const SearchRequest_Corpus SearchRequest::PRODUCTS;
const SearchRequest_Corpus SearchRequest::VIDEO;
const SearchRequest_Corpus SearchRequest::Corpus_MIN;
const SearchRequest_Corpus SearchRequest::Corpus_MAX;
const int SearchRequest::Corpus_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SearchRequest::_default_new1_ = NULL;
::std::string* SearchRequest::_default_new2_ = NULL;
::std::string* SearchRequest::_default_new3_ = NULL;
::std::string* SearchRequest::_default_new4_ = NULL;
::std::string* SearchRequest::_default_new5_ = NULL;
#ifndef _MSC_VER
const int SearchRequest::kQueryFieldNumber;
const int SearchRequest::kPageNumberFieldNumber;
const int SearchRequest::kResultPerPageFieldNumber;
const int SearchRequest::kMoney1FieldNumber;
const int SearchRequest::kMoney2FieldNumber;
const int SearchRequest::kSamplesFieldNumber;
const int SearchRequest::kCorpusFieldNumber;
const int SearchRequest::kResultFieldNumber;
const int SearchRequest::kNew1FieldNumber;
const int SearchRequest::kNew2FieldNumber;
const int SearchRequest::kNew3FieldNumber;
const int SearchRequest::kNew4FieldNumber;
const int SearchRequest::kNew5FieldNumber;
#endif  // !_MSC_VER

SearchRequest::SearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestDemoNew1.SearchRequest)
}

void SearchRequest::InitAsDefaultInstance() {
  result_ = const_cast< ::TestDemoNew1::Result*>(&::TestDemoNew1::Result::default_instance());
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestDemoNew1.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_number_ = 10;
  result_per_page_ = 0;
  money_1_ = 0;
  money_2_ = 0;
  corpus_ = 0;
  result_ = NULL;
  new1_ = const_cast< ::std::string*>(_default_new1_);
  new2_ = const_cast< ::std::string*>(_default_new2_);
  new3_ = const_cast< ::std::string*>(_default_new3_);
  new4_ = const_cast< ::std::string*>(_default_new4_);
  new5_ = const_cast< ::std::string*>(_default_new5_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:TestDemoNew1.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (new1_ != _default_new1_) {
    delete new1_;
  }
  if (new2_ != _default_new2_) {
    delete new2_;
  }
  if (new3_ != _default_new3_) {
    delete new3_;
  }
  if (new4_ != _default_new4_) {
    delete new4_;
  }
  if (new5_ != _default_new5_) {
    delete new5_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_searchrequest_5fnew1_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New() const {
  return new SearchRequest;
}

void SearchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(result_per_page_, corpus_);
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_->clear();
      }
    }
    page_number_ = 10;
    if (has_result()) {
      if (result_ != NULL) result_->::TestDemoNew1::Result::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_new1()) {
      if (new1_ != _default_new1_) {
        new1_->assign(*_default_new1_);
      }
    }
    if (has_new2()) {
      if (new2_ != _default_new2_) {
        new2_->assign(*_default_new2_);
      }
    }
    if (has_new3()) {
      if (new3_ != _default_new3_) {
        new3_->assign(*_default_new3_);
      }
    }
    if (has_new4()) {
      if (new4_ != _default_new4_) {
        new4_->assign(*_default_new4_);
      }
    }
    if (has_new5()) {
      if (new5_ != _default_new5_) {
        new5_->assign(*_default_new5_);
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestDemoNew1.SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // optional int32 page_number = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_number_)));
          set_has_page_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_per_page;
        break;
      }

      // optional int32 result_per_page = 3;
      case 3: {
        if (tag == 24) {
         parse_result_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_per_page_)));
          set_has_result_per_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_money_1;
        break;
      }

      // optional float money_1 = 4;
      case 4: {
        if (tag == 37) {
         parse_money_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_1_)));
          set_has_money_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_money_2;
        break;
      }

      // optional double money_2 = 5;
      case 5: {
        if (tag == 41) {
         parse_money_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_2_)));
          set_has_money_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_samples;
        break;
      }

      // repeated int32 samples = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_samples())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_samples())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_corpus;
        break;
      }

      // optional .TestDemoNew1.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
      case 7: {
        if (tag == 56) {
         parse_corpus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TestDemoNew1::SearchRequest_Corpus_IsValid(value)) {
            set_corpus(static_cast< ::TestDemoNew1::SearchRequest_Corpus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_result;
        break;
      }

      // optional .TestDemoNew1.Result result = 8;
      case 8: {
        if (tag == 66) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_new1;
        break;
      }

      // optional string new1 = 9 [default = "add new1 field"];
      case 9: {
        if (tag == 74) {
         parse_new1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new1().data(), this->new1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_new2;
        break;
      }

      // optional string new2 = 10 [default = "add new2 field"];
      case 10: {
        if (tag == 82) {
         parse_new2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new2().data(), this->new2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_new3;
        break;
      }

      // optional string new3 = 11 [default = "add new3 field"];
      case 11: {
        if (tag == 90) {
         parse_new3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new3().data(), this->new3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_new4;
        break;
      }

      // optional string new4 = 12 [default = "add new4 field"];
      case 12: {
        if (tag == 98) {
         parse_new4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new4().data(), this->new4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_new5;
        break;
      }

      // optional string new5 = 13 [default = "add new5 field"];
      case 13: {
        if (tag == 106) {
         parse_new5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new5().data(), this->new5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestDemoNew1.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestDemoNew1.SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestDemoNew1.SearchRequest)
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional int32 page_number = 2 [default = 10];
  if (has_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_number(), output);
  }

  // optional int32 result_per_page = 3;
  if (has_result_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_per_page(), output);
  }

  // optional float money_1 = 4;
  if (has_money_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->money_1(), output);
  }

  // optional double money_2 = 5;
  if (has_money_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->money_2(), output);
  }

  // repeated int32 samples = 6 [packed = true];
  if (this->samples_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_samples_cached_byte_size_);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->samples(i), output);
  }

  // optional .TestDemoNew1.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
  if (has_corpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->corpus(), output);
  }

  // optional .TestDemoNew1.Result result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->result(), output);
  }

  // optional string new1 = 9 [default = "add new1 field"];
  if (has_new1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new1().data(), this->new1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->new1(), output);
  }

  // optional string new2 = 10 [default = "add new2 field"];
  if (has_new2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new2().data(), this->new2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->new2(), output);
  }

  // optional string new3 = 11 [default = "add new3 field"];
  if (has_new3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new3().data(), this->new3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->new3(), output);
  }

  // optional string new4 = 12 [default = "add new4 field"];
  if (has_new4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new4().data(), this->new4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->new4(), output);
  }

  // optional string new5 = 13 [default = "add new5 field"];
  if (has_new5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new5().data(), this->new5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->new5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestDemoNew1.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestDemoNew1.SearchRequest)
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // optional int32 page_number = 2 [default = 10];
  if (has_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_number(), target);
  }

  // optional int32 result_per_page = 3;
  if (has_result_per_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_per_page(), target);
  }

  // optional float money_1 = 4;
  if (has_money_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->money_1(), target);
  }

  // optional double money_2 = 5;
  if (has_money_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->money_2(), target);
  }

  // repeated int32 samples = 6 [packed = true];
  if (this->samples_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _samples_cached_byte_size_, target);
  }
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->samples(i), target);
  }

  // optional .TestDemoNew1.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
  if (has_corpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->corpus(), target);
  }

  // optional .TestDemoNew1.Result result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->result(), target);
  }

  // optional string new1 = 9 [default = "add new1 field"];
  if (has_new1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new1().data(), this->new1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->new1(), target);
  }

  // optional string new2 = 10 [default = "add new2 field"];
  if (has_new2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new2().data(), this->new2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->new2(), target);
  }

  // optional string new3 = 11 [default = "add new3 field"];
  if (has_new3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new3().data(), this->new3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->new3(), target);
  }

  // optional string new4 = 12 [default = "add new4 field"];
  if (has_new4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new4().data(), this->new4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->new4(), target);
  }

  // optional string new5 = 13 [default = "add new5 field"];
  if (has_new5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new5().data(), this->new5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->new5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestDemoNew1.SearchRequest)
  return target;
}

int SearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional int32 page_number = 2 [default = 10];
    if (has_page_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_number());
    }

    // optional int32 result_per_page = 3;
    if (has_result_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_per_page());
    }

    // optional float money_1 = 4;
    if (has_money_1()) {
      total_size += 1 + 4;
    }

    // optional double money_2 = 5;
    if (has_money_2()) {
      total_size += 1 + 8;
    }

    // optional .TestDemoNew1.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
    if (has_corpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->corpus());
    }

    // optional .TestDemoNew1.Result result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string new1 = 9 [default = "add new1 field"];
    if (has_new1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new1());
    }

    // optional string new2 = 10 [default = "add new2 field"];
    if (has_new2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new2());
    }

    // optional string new3 = 11 [default = "add new3 field"];
    if (has_new3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new3());
    }

    // optional string new4 = 12 [default = "add new4 field"];
    if (has_new4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new4());
    }

    // optional string new5 = 13 [default = "add new5 field"];
    if (has_new5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new5());
    }

  }
  // repeated int32 samples = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->samples_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->samples(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _samples_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_page_number()) {
      set_page_number(from.page_number());
    }
    if (from.has_result_per_page()) {
      set_result_per_page(from.result_per_page());
    }
    if (from.has_money_1()) {
      set_money_1(from.money_1());
    }
    if (from.has_money_2()) {
      set_money_2(from.money_2());
    }
    if (from.has_corpus()) {
      set_corpus(from.corpus());
    }
    if (from.has_result()) {
      mutable_result()->::TestDemoNew1::Result::MergeFrom(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new1()) {
      set_new1(from.new1());
    }
    if (from.has_new2()) {
      set_new2(from.new2());
    }
    if (from.has_new3()) {
      set_new3(from.new3());
    }
    if (from.has_new4()) {
      set_new4(from.new4());
    }
    if (from.has_new5()) {
      set_new5(from.new5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(page_number_, other->page_number_);
    std::swap(result_per_page_, other->result_per_page_);
    std::swap(money_1_, other->money_1_);
    std::swap(money_2_, other->money_2_);
    samples_.Swap(&other->samples_);
    std::swap(corpus_, other->corpus_);
    std::swap(result_, other->result_);
    std::swap(new1_, other->new1_);
    std::swap(new2_, other->new2_);
    std::swap(new3_, other->new3_);
    std::swap(new4_, other->new4_);
    std::swap(new5_, other->new5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kUrlFieldNumber;
const int Result::kTitleFieldNumber;
const int Result::kSnippetsFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestDemoNew1.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestDemoNew1.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:TestDemoNew1.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_searchrequest_5fnew1_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  snippets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestDemoNew1.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_snippets;
        break;
      }

      // repeated string snippets = 3;
      case 3: {
        if (tag == 26) {
         parse_snippets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snippets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippets(this->snippets_size() - 1).data(),
            this->snippets(this->snippets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snippets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_snippets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestDemoNew1.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestDemoNew1.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestDemoNew1.Result)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated string snippets = 3;
  for (int i = 0; i < this->snippets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->snippets(i).data(), this->snippets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "snippets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->snippets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestDemoNew1.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestDemoNew1.Result)
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated string snippets = 3;
  for (int i = 0; i < this->snippets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippets(i).data(), this->snippets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snippets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->snippets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestDemoNew1.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated string snippets = 3;
  total_size += 1 * this->snippets_size();
  for (int i = 0; i < this->snippets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snippets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  snippets_.MergeFrom(from.snippets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(title_, other->title_);
    snippets_.Swap(&other->snippets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestDemoNew1

// @@protoc_insertion_point(global_scope)
