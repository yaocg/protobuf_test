// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: searchrequest.proto

#ifndef PROTOBUF_searchrequest_2eproto__INCLUDED
#define PROTOBUF_searchrequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TestDemo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_searchrequest_2eproto();
void protobuf_AssignDesc_searchrequest_2eproto();
void protobuf_ShutdownFile_searchrequest_2eproto();

class SearchRequest;
class Result;

enum SearchRequest_Corpus {
  SearchRequest_Corpus_UNIVERSAL = 0,
  SearchRequest_Corpus_WEB = 1,
  SearchRequest_Corpus_IMAGES = 2,
  SearchRequest_Corpus_LOCAL = 3,
  SearchRequest_Corpus_NEWS = 4,
  SearchRequest_Corpus_PRODUCTS = 5,
  SearchRequest_Corpus_VIDEO = 6
};
bool SearchRequest_Corpus_IsValid(int value);
const SearchRequest_Corpus SearchRequest_Corpus_Corpus_MIN = SearchRequest_Corpus_UNIVERSAL;
const SearchRequest_Corpus SearchRequest_Corpus_Corpus_MAX = SearchRequest_Corpus_VIDEO;
const int SearchRequest_Corpus_Corpus_ARRAYSIZE = SearchRequest_Corpus_Corpus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SearchRequest_Corpus_descriptor();
inline const ::std::string& SearchRequest_Corpus_Name(SearchRequest_Corpus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SearchRequest_Corpus_descriptor(), value);
}
inline bool SearchRequest_Corpus_Parse(
    const ::std::string& name, SearchRequest_Corpus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchRequest_Corpus>(
    SearchRequest_Corpus_descriptor(), name, value);
}
// ===================================================================

class SearchRequest : public ::google::protobuf::Message {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  void Swap(SearchRequest* other);

  // implements Message ----------------------------------------------

  SearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SearchRequest_Corpus Corpus;
  static const Corpus UNIVERSAL = SearchRequest_Corpus_UNIVERSAL;
  static const Corpus WEB = SearchRequest_Corpus_WEB;
  static const Corpus IMAGES = SearchRequest_Corpus_IMAGES;
  static const Corpus LOCAL = SearchRequest_Corpus_LOCAL;
  static const Corpus NEWS = SearchRequest_Corpus_NEWS;
  static const Corpus PRODUCTS = SearchRequest_Corpus_PRODUCTS;
  static const Corpus VIDEO = SearchRequest_Corpus_VIDEO;
  static inline bool Corpus_IsValid(int value) {
    return SearchRequest_Corpus_IsValid(value);
  }
  static const Corpus Corpus_MIN =
    SearchRequest_Corpus_Corpus_MIN;
  static const Corpus Corpus_MAX =
    SearchRequest_Corpus_Corpus_MAX;
  static const int Corpus_ARRAYSIZE =
    SearchRequest_Corpus_Corpus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Corpus_descriptor() {
    return SearchRequest_Corpus_descriptor();
  }
  static inline const ::std::string& Corpus_Name(Corpus value) {
    return SearchRequest_Corpus_Name(value);
  }
  static inline bool Corpus_Parse(const ::std::string& name,
      Corpus* value) {
    return SearchRequest_Corpus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // optional int32 page_number = 2 [default = 10];
  inline bool has_page_number() const;
  inline void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  inline ::google::protobuf::int32 page_number() const;
  inline void set_page_number(::google::protobuf::int32 value);

  // optional int32 result_per_page = 3;
  inline bool has_result_per_page() const;
  inline void clear_result_per_page();
  static const int kResultPerPageFieldNumber = 3;
  inline ::google::protobuf::int32 result_per_page() const;
  inline void set_result_per_page(::google::protobuf::int32 value);

  // optional float money_1 = 4;
  inline bool has_money_1() const;
  inline void clear_money_1();
  static const int kMoney1FieldNumber = 4;
  inline float money_1() const;
  inline void set_money_1(float value);

  // optional double money_2 = 5;
  inline bool has_money_2() const;
  inline void clear_money_2();
  static const int kMoney2FieldNumber = 5;
  inline double money_2() const;
  inline void set_money_2(double value);

  // repeated int32 samples = 6 [packed = true];
  inline int samples_size() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 6;
  inline ::google::protobuf::int32 samples(int index) const;
  inline void set_samples(int index, ::google::protobuf::int32 value);
  inline void add_samples(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      samples() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_samples();

  // optional .TestDemo.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
  inline bool has_corpus() const;
  inline void clear_corpus();
  static const int kCorpusFieldNumber = 7;
  inline ::TestDemo::SearchRequest_Corpus corpus() const;
  inline void set_corpus(::TestDemo::SearchRequest_Corpus value);

  // optional .TestDemo.Result result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  inline const ::TestDemo::Result& result() const;
  inline ::TestDemo::Result* mutable_result();
  inline ::TestDemo::Result* release_result();
  inline void set_allocated_result(::TestDemo::Result* result);

  // @@protoc_insertion_point(class_scope:TestDemo.SearchRequest)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_page_number();
  inline void clear_has_page_number();
  inline void set_has_result_per_page();
  inline void clear_has_result_per_page();
  inline void set_has_money_1();
  inline void clear_has_money_1();
  inline void set_has_money_2();
  inline void clear_has_money_2();
  inline void set_has_corpus();
  inline void clear_has_corpus();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* query_;
  ::google::protobuf::int32 page_number_;
  ::google::protobuf::int32 result_per_page_;
  double money_2_;
  float money_1_;
  int corpus_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > samples_;
  mutable int _samples_cached_byte_size_;
  ::TestDemo::Result* result_;
  friend void  protobuf_AddDesc_searchrequest_2eproto();
  friend void protobuf_AssignDesc_searchrequest_2eproto();
  friend void protobuf_ShutdownFile_searchrequest_2eproto();

  void InitAsDefaultInstance();
  static SearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated string snippets = 3;
  inline int snippets_size() const;
  inline void clear_snippets();
  static const int kSnippetsFieldNumber = 3;
  inline const ::std::string& snippets(int index) const;
  inline ::std::string* mutable_snippets(int index);
  inline void set_snippets(int index, const ::std::string& value);
  inline void set_snippets(int index, const char* value);
  inline void set_snippets(int index, const char* value, size_t size);
  inline ::std::string* add_snippets();
  inline void add_snippets(const ::std::string& value);
  inline void add_snippets(const char* value);
  inline void add_snippets(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& snippets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snippets();

  // @@protoc_insertion_point(class_scope:TestDemo.Result)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snippets_;
  friend void  protobuf_AddDesc_searchrequest_2eproto();
  friend void protobuf_AssignDesc_searchrequest_2eproto();
  friend void protobuf_ShutdownFile_searchrequest_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchRequest

// required string query = 1;
inline bool SearchRequest::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchRequest::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchRequest::clear_query() {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.query)
  return *query_;
}
inline void SearchRequest::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set_char:TestDemo.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestDemo.SearchRequest.query)
}
inline ::std::string* SearchRequest::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TestDemo.SearchRequest.query)
  return query_;
}
inline ::std::string* SearchRequest::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SearchRequest::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TestDemo.SearchRequest.query)
}

// optional int32 page_number = 2 [default = 10];
inline bool SearchRequest::has_page_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchRequest::set_has_page_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchRequest::clear_has_page_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchRequest::clear_page_number() {
  page_number_ = 10;
  clear_has_page_number();
}
inline ::google::protobuf::int32 SearchRequest::page_number() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.page_number)
  return page_number_;
}
inline void SearchRequest::set_page_number(::google::protobuf::int32 value) {
  set_has_page_number();
  page_number_ = value;
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.page_number)
}

// optional int32 result_per_page = 3;
inline bool SearchRequest::has_result_per_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchRequest::set_has_result_per_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchRequest::clear_has_result_per_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchRequest::clear_result_per_page() {
  result_per_page_ = 0;
  clear_has_result_per_page();
}
inline ::google::protobuf::int32 SearchRequest::result_per_page() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.result_per_page)
  return result_per_page_;
}
inline void SearchRequest::set_result_per_page(::google::protobuf::int32 value) {
  set_has_result_per_page();
  result_per_page_ = value;
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.result_per_page)
}

// optional float money_1 = 4;
inline bool SearchRequest::has_money_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchRequest::set_has_money_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchRequest::clear_has_money_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchRequest::clear_money_1() {
  money_1_ = 0;
  clear_has_money_1();
}
inline float SearchRequest::money_1() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.money_1)
  return money_1_;
}
inline void SearchRequest::set_money_1(float value) {
  set_has_money_1();
  money_1_ = value;
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.money_1)
}

// optional double money_2 = 5;
inline bool SearchRequest::has_money_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchRequest::set_has_money_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchRequest::clear_has_money_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchRequest::clear_money_2() {
  money_2_ = 0;
  clear_has_money_2();
}
inline double SearchRequest::money_2() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.money_2)
  return money_2_;
}
inline void SearchRequest::set_money_2(double value) {
  set_has_money_2();
  money_2_ = value;
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.money_2)
}

// repeated int32 samples = 6 [packed = true];
inline int SearchRequest::samples_size() const {
  return samples_.size();
}
inline void SearchRequest::clear_samples() {
  samples_.Clear();
}
inline ::google::protobuf::int32 SearchRequest::samples(int index) const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.samples)
  return samples_.Get(index);
}
inline void SearchRequest::set_samples(int index, ::google::protobuf::int32 value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.samples)
}
inline void SearchRequest::add_samples(::google::protobuf::int32 value) {
  samples_.Add(value);
  // @@protoc_insertion_point(field_add:TestDemo.SearchRequest.samples)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchRequest::samples() const {
  // @@protoc_insertion_point(field_list:TestDemo.SearchRequest.samples)
  return samples_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchRequest::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:TestDemo.SearchRequest.samples)
  return &samples_;
}

// optional .TestDemo.SearchRequest.Corpus corpus = 7 [default = UNIVERSAL];
inline bool SearchRequest::has_corpus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SearchRequest::set_has_corpus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SearchRequest::clear_has_corpus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SearchRequest::clear_corpus() {
  corpus_ = 0;
  clear_has_corpus();
}
inline ::TestDemo::SearchRequest_Corpus SearchRequest::corpus() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.corpus)
  return static_cast< ::TestDemo::SearchRequest_Corpus >(corpus_);
}
inline void SearchRequest::set_corpus(::TestDemo::SearchRequest_Corpus value) {
  assert(::TestDemo::SearchRequest_Corpus_IsValid(value));
  set_has_corpus();
  corpus_ = value;
  // @@protoc_insertion_point(field_set:TestDemo.SearchRequest.corpus)
}

// optional .TestDemo.Result result = 8;
inline bool SearchRequest::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SearchRequest::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SearchRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SearchRequest::clear_result() {
  if (result_ != NULL) result_->::TestDemo::Result::Clear();
  clear_has_result();
}
inline const ::TestDemo::Result& SearchRequest::result() const {
  // @@protoc_insertion_point(field_get:TestDemo.SearchRequest.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::TestDemo::Result* SearchRequest::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::TestDemo::Result;
  // @@protoc_insertion_point(field_mutable:TestDemo.SearchRequest.result)
  return result_;
}
inline ::TestDemo::Result* SearchRequest::release_result() {
  clear_has_result();
  ::TestDemo::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void SearchRequest::set_allocated_result(::TestDemo::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:TestDemo.SearchRequest.result)
}

// -------------------------------------------------------------------

// Result

// required string url = 1;
inline bool Result::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Result::url() const {
  // @@protoc_insertion_point(field_get:TestDemo.Result.url)
  return *url_;
}
inline void Result::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:TestDemo.Result.url)
}
inline void Result::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:TestDemo.Result.url)
}
inline void Result::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestDemo.Result.url)
}
inline ::std::string* Result::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TestDemo.Result.url)
  return url_;
}
inline ::std::string* Result::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TestDemo.Result.url)
}

// optional string title = 2;
inline bool Result::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Result::title() const {
  // @@protoc_insertion_point(field_get:TestDemo.Result.title)
  return *title_;
}
inline void Result::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:TestDemo.Result.title)
}
inline void Result::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:TestDemo.Result.title)
}
inline void Result::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestDemo.Result.title)
}
inline ::std::string* Result::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TestDemo.Result.title)
  return title_;
}
inline ::std::string* Result::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TestDemo.Result.title)
}

// repeated string snippets = 3;
inline int Result::snippets_size() const {
  return snippets_.size();
}
inline void Result::clear_snippets() {
  snippets_.Clear();
}
inline const ::std::string& Result::snippets(int index) const {
  // @@protoc_insertion_point(field_get:TestDemo.Result.snippets)
  return snippets_.Get(index);
}
inline ::std::string* Result::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:TestDemo.Result.snippets)
  return snippets_.Mutable(index);
}
inline void Result::set_snippets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TestDemo.Result.snippets)
  snippets_.Mutable(index)->assign(value);
}
inline void Result::set_snippets(int index, const char* value) {
  snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TestDemo.Result.snippets)
}
inline void Result::set_snippets(int index, const char* value, size_t size) {
  snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestDemo.Result.snippets)
}
inline ::std::string* Result::add_snippets() {
  return snippets_.Add();
}
inline void Result::add_snippets(const ::std::string& value) {
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TestDemo.Result.snippets)
}
inline void Result::add_snippets(const char* value) {
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TestDemo.Result.snippets)
}
inline void Result::add_snippets(const char* value, size_t size) {
  snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TestDemo.Result.snippets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Result::snippets() const {
  // @@protoc_insertion_point(field_list:TestDemo.Result.snippets)
  return snippets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Result::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:TestDemo.Result.snippets)
  return &snippets_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestDemo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TestDemo::SearchRequest_Corpus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TestDemo::SearchRequest_Corpus>() {
  return ::TestDemo::SearchRequest_Corpus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_searchrequest_2eproto__INCLUDED
